{"version":3,"sources":["athens/devcards/athena.cljs"],"mappings":"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","names":["G__79981","re-frame.core/dispatch","js/athens","js/athens.devcards","js/athens.devcards.athena","js/athens.devcards.athena.conn","athens.devcards.athena/conn","athens.devcards.db/new-conn","athens.devcards.db/posh-conn!","athens.devcards.athena/handler","n","cljs.core/deref","n-child","datascript.core.transact_BANG_.cljs$core$IFn$_invoke$arity$2","athens.devcards.athena/container-style","athens.style/DEPTH-SHADOWS","athens.style.color.cljs$core$IFn$_invoke$arity$2","athens.style.color.cljs$core$IFn$_invoke$arity$1","athens.devcards.athena/athena-input-style","athens.devcards.athena/results-list-style","athens.devcards.athena/results-heading-style","athens.devcards.athena/result-style","athens.devcards.athena/result-highlight-style","athens.devcards.athena/hint-style","athens.style/OPACITIES","athens.devcards.athena/athena-prompt","athens.devcards.buttons/button-primary","G__79983","js/module$node_modules$$material_ui$icons$index.Search","athens.devcards.athena/re-case-insensitive","query","cljs.core/re-pattern","athens.devcards.athena/search-in-block-title","db","G__79984","G__79985","G__79986","datascript.core/q","athens.devcards.athena/get-parent-node","block","b","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","cljs.core/first","athens.devcards.athena/search-in-block-content","G__79988","G__79989","G__79990","cljs.core.map.cljs$core$IFn$_invoke$arity$2","p1__79987#","cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2","athens.devcards.athena/highlight-match","txt","query-pattern","cljs.core.map_indexed.cljs$core$IFn$_invoke$arity$2","i","part","cljs.core/re-find","stylefy.core.use_style.cljs$core$IFn$_invoke$arity$2","clojure.string.split.cljs$core$IFn$_invoke$arity$2","athens.devcards.athena/recent","stylefy.core.use_style.cljs$core$IFn$_invoke$arity$1","athens.devcards.athena/athena","conn","*cache","reagent.core.atom.cljs$core$IFn$_invoke$arity$1","*match","datascript.core/db","athena?","G__79991","re-frame.core/subscribe","handler","e","clojure.string/blank?","cljs.core/reset!","result","or__4185__auto__","cljs.core.get.cljs$core$IFn$_invoke$arity$2","G__79992","cljs.core/count","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4","cljs.core/assoc","vec__79993","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","map__79996","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","pages","blocks","cljs.core.doall.cljs$core$IFn$_invoke$arity$1","iter__4582__auto__","s__79999","cljs.core/LazySeq","temp__5735__auto__","cljs.core/seq","cljs.core/chunked-seq?","c__4580__auto__","size__4581__auto__","b__80001","cljs.core/chunk-buffer","i__80000","vec__80002","cljs.core._nth.cljs$core$IFn$_invoke$arity$2","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__79998","cljs.core/chunk-rest","vec__80005","cljs.core/cons","cljs.core/rest","x","cljs.core/list","cljs.core.take.cljs$core$IFn$_invoke$arity$2","cljs.core.concat.cljs$core$IFn$_invoke$arity$2","parent","page-title","block-uid","block-string","athens.router/navigate-page","stylefy.core.use_sub_style.cljs$core$IFn$_invoke$arity$2","js/module$node_modules$$material_ui$icons$index.ArrowForward","cljs.core/chunk-first"],"sourcesContent":["(ns athens.devcards.athena\n  (:require\n    [\"@material-ui/icons\" :as mui-icons]\n    [athens.devcards.buttons :refer [button-primary]]\n    [athens.devcards.db :refer [new-conn posh-conn! load-real-db-button]]\n    [athens.events]\n    [athens.router :refer [navigate-page]]\n    [athens.style :refer [base-styles color DEPTH-SHADOWS OPACITIES]]\n    [athens.subs]\n    [cljsjs.react]\n    [cljsjs.react.dom]\n    [clojure.string :as str]\n    [datascript.core :as d]\n    [devcards.core :refer-macros [defcard-rg]]\n    [re-frame.core :refer [subscribe dispatch]]\n    [reagent.core :as r]\n    [stylefy.core :as stylefy :refer [use-style use-sub-style]]))\n\n\n(defcard-rg Import-Styles\n  [base-styles])\n\n\n(defcard-rg Instantiate-app-db\n  \"Using re-frame, even though DevCards </3 re-frame. Not using re-frame elsewhere for subs, but will probably\n  need refactoring or real isolation later.\n\n  - https://github.com/athensresearch/athens/issues/126\n  - https://github.com/bhauman/devcards/issues/105\n  - https://github.com/bhauman/devcards/pull/131/\n  \")\n\n\n(dispatch [:init-rfdb])\n\n(defcard-rg Instantiate-Dsdb)\n(defonce conn (new-conn))\n(posh-conn! conn)\n\n\n(defn handler\n  []\n  (let [n (inc (:max-eid @conn))\n        n-child (inc n)]\n    (d/transact! conn [{:node/title     (str \"Test Page \" n)\n                        :block/uid      (str \"uid-\" n)\n                        :block/children [{:block/string (str \"Test Block\" n-child) :block/uid (str \"uid-\" n-child)}]}])))\n\n\n(defcard-rg Create-Page\n  \"Press button and then search \\\"test\\\" \"\n  [button-primary {:on-click-fn handler\n                   :label \"Create Test Pages and Blocks\"}])\n\n\n(defcard-rg Load-Real-DB\n  [load-real-db-button conn])\n\n\n;; STYLES\n\n\n\n(def container-style\n  {:width         \"784px\"\n   :border-radius \"4px\"\n   :box-shadow    [[(:64 DEPTH-SHADOWS) \", 0 0 0 1px \" (color :body-text-color :opacity-lower)]]\n   :display       \"flex\"\n   :flex-direction \"column\"\n   :background    (color :app-bg-color)\n   :position      \"fixed\"\n   :overflow      \"hidden\"\n   :max-height    \"60vh\"\n   :top           \"50%\"\n   :left          \"50%\"\n   :transform     \"translate(-50%, -50%)\"\n   :z-index       2})\n\n\n(def athena-input-style\n  {:width \"100%\"\n   :border 0\n   :font-size      \"38px\"\n   :font-weight    \"300\"\n   :line-height    \"49px\"\n   :letter-spacing \"-0.03em\"\n   :border-radius \"4px 4px 0 0\"\n   :color          \"#433F38\"\n   :caret-color    (color :link-color)\n   :padding \"24px\"\n   :cursor \"text\"\n   ::stylefy/mode {:focus {:outline \"none\"}\n                   \"::placeholder\" {:color (color :body-text-color :opacity-low)}}})\n\n\n(def results-list-style\n  {:background    (color :app-bg-color)\n   :overflow-y \"auto\"\n   :max-height \"100%\"})\n\n\n(def results-heading-style\n  {:padding \"4px 18px\"\n   :background (color :app-bg-color)\n   :display \"flex\"\n   :position \"sticky\"\n   :top \"0\"\n   :justify-content \"space-between\"\n   :box-shadow [[\"0 1px 0 0 \" (color :body-text-color :opacity-lower)]]\n   :border-top [[\"1px solid\" (color :body-text-color :opacity-lower)]]})\n\n\n(def result-style\n  {:display \"grid\"\n   :grid-template \"\\\"title icon\\\" \\\"preview icon\\\"\"\n   :grid-gap \"0 12px\"\n   :grid-template-columns \"1fr auto\"\n   :padding \"8px 32px\"\n   :background (color :body-text-color 0.02)\n   :transition \"all .05s ease\"\n   :border-top [[\"1px solid \" (color :body-text-color :opacity-lower)]]\n   ::stylefy/sub-styles {:title {:grid-area \"title\"\n                                 :font-size \"16px\"\n                                 :margin \"0\"\n                                 :color (color :header-text-color)\n                                 :font-weight \"500\"}\n                         :preview {:grid-area \"preview\"\n                                   :white-space \"wrap\"\n                                   :word-break \"break-word\"\n                                  ;;  :overflow \"hidden\"\n                                  ;;  :text-overflow \"ellipsis\"\n                                  ;;  :display \"-webkit-box\"\n                                  ;;  :-webkit-line-clamp \"2\"\n                                  ;;  :-webkit-box-orient \"vertical\"\n                                   :color (color :body-text-color :opacity-med)}\n                         :link-leader {:grid-area \"icon\"\n                                       :color \"transparent\"\n                                       :margin \"auto auto\"}}\n   ::stylefy/mode {:hover {:background (color :link-color)\n                           :color (color :app-bg-color)}}\n   ::stylefy/manual [[:&:hover [:.title :.preview :.link-leader :.result-highlight {:color \"inherit\"}]]]})\n\n\n(def result-highlight-style\n  {:color \"#000\"\n   :font-weight \"500\"})\n\n\n(def hint-style\n  {:color \"inherit\"\n   :opacity (:opacity-med OPACITIES)\n   :font-size \"14px\"\n   ::stylefy/manual [[:kbd {:text-transform \"uppercase\"\n                            :font-family \"inherit\"\n                            :font-size \"12px\"\n                            :font-weight 600\n                            :border \"1px solid rgba(67, 63, 56, 0.25)\"\n                            :border-radius \"4px\"\n                            :padding \"0 4px\"}]]})\n\n\n;; COMPONENTS\n\n(defn athena-prompt\n  []\n  [button-primary {:on-click-fn #(dispatch [:toggle-athena])\n                   :label [:<>\n                           [:> mui-icons/Search]\n                           [:span \"Find or Create a Page\"]]\n                   :style {:font-size \"11px\"}}])\n\n\n(defn re-case-insensitive\n  \"More options here https://clojuredocs.org/clojure.core/re-pattern\"\n  [query]\n  (re-pattern (str \"(?i)\" query)))\n\n\n(defn search-in-block-title\n  [db query]\n  (d/q '[:find [(pull ?node [:db/id :node/title :block/uid]) ...]\n         :in $ ?query-pattern\n         :where\n         [?node :node/title ?txt]\n         [(re-find ?query-pattern ?txt)]]\n       db\n       (re-case-insensitive query)))\n\n\n(defn get-parent-node\n  [block]\n  (loop [b block]\n    (if (:node/title b)\n      (assoc block :block/parent b)\n      (recur (first (:block/_children b))))))\n\n\n(defn search-in-block-content\n  [db query]\n  (->>\n    (d/q '[:find [(pull ?block [:db/id :block/uid :block/string :node/title {:block/_children ...}]) ...]\n           :in $ ?query-pattern\n           :where\n           [?block :block/string ?txt]\n           [(re-find ?query-pattern ?txt)]]\n         db\n         (re-case-insensitive query))\n    (map get-parent-node)\n    (map #(dissoc % :block/_children))))\n\n\n(defn highlight-match\n  [query txt]\n  (let [query-pattern (re-case-insensitive (str \"((?<=\" query \")|(?=\" query \"))\"))]\n    (map-indexed (fn [i part]\n                   (if (re-find query-pattern part)\n                     [:span.result-highlight (use-style result-highlight-style {:key i}) part]\n                     part))\n                 (clojure.string/split txt query-pattern))))\n\n\n(defn recent\n  []\n  [:div (use-style results-heading-style)\n   [:h5 \"Recent\"]\n   [:span (use-style hint-style)\n    \"Press \"\n    [:kbd \"shift + enter\"]\n    \" to open in right sidebar.\"]])\n\n\n(defn athena\n  [conn]\n  (let [*cache (r/atom {})\n        *match (r/atom nil)\n        db (d/db conn)\n        athena? (subscribe [:athena])\n        handler (fn [e]\n                  (let [query (.. e -target -value)]\n                    (if (clojure.string/blank? query)\n                      (reset! *match [query nil])\n                      (let [result (or (get @*cache query)\n                                       (cond-> {:pages (search-in-block-title db query)}\n                                         (count query) (assoc :blocks (search-in-block-content db query))))]\n                        (swap! *cache assoc query result)\n                        (reset! *match [query result])))))]\n    (when @athena?\n      [:div (use-style container-style)\n       [:input (use-style athena-input-style\n                          {:type        \"search\"\n                           :auto-focus  true\n                           :placeholder \"Find or Create Page\"\n                           :on-change   handler})]\n       [recent]\n       [(fn []\n          (let [[query {:keys [pages blocks] :as result}] @*match]\n            (when result\n              [:div (use-style results-list-style)\n               (doall\n                 (for [[i x] (map-indexed list (take 40 (concat (take 20 pages) blocks)))]\n                   (let [parent (:block/parent x)\n                         page-title (or (:node/title parent) (:node/title x))\n                         block-uid (or (:block/uid parent) (:block/uid x))\n                         block-string (:block/string x)]\n                     [:div (use-style result-style {:key i :on-click #(navigate-page block-uid)})\n                      [:h4.title (use-sub-style result-style :title) (highlight-match query page-title)]\n                      (when block-string\n                        [:span.preview (use-sub-style result-style :preview) (highlight-match query block-string)])\n                      [:span.link-leader (use-sub-style result-style :link-leader) [:> mui-icons/ArrowForward]]])))])))]])))\n\n\n(defcard-rg Athena-Prompt\n  \"Must press again to close. Doesn't go away if you click outside.\"\n  [:<>\n   [athena-prompt]\n   [athena conn]])\n"]}