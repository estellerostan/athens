{"version":3,"sources":["athens/parse_renderer.cljs"],"mappings":";;;;;;AAQA,AAAA,AAKA;;;AAAA,AAAMA,AAEHC;AAFH,AAGE,AAAAC,AAAA,AAAA,AACc;AAAOG;AAAP,AACE,AAAA,AAAA,AAAA,AAAA,AAAA,AAACC,AAAgCD;;;AAD5BA;;;;AAAAA;;AAAAA;;;AAAAA;AAAAA;;;;;AADrB,AAGc,AAAKE;AAAL,AACE,AAAMC,AAAG,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAoCF;AAApC,AAAA,AAAAE,AAAAA,AAACC,AAAAA,AAAAA;;AAAV,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;AAAA,AAGsB,AAACC,AAAc,AAAA,AAAA,AAAAC,AAAaJ;AAHlD,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAIiED;AARjF,AAUc,AAAKM;AAAL,AACE,AAAMC,AAAO,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAsCF;AAAtC,AAAA,AAAAE,AAAAA,AAACL,AAAAA,AAAAA;;AAAd,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;AAAA,AAGsB,AAACC,AAAcE;AAAM,AAAAG,AAAkB,AAAA,AAAA,AAAAJ,AAAgBE;AAAlC,AAAA,AAAAE,AAAAA,AAACC,AAAAA,AAAAA;;AAd5D,AAec,AAAKC;AAAL,AACE,AAAMV,AAAG,AAAAW,AAAA,AAAA,AAAA,AAAA,AAAoCD;AAApC,AAAA,AAAAC,AAAAA,AAACT,AAAAA,AAAAA;;AAAV,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;AAAA,AAGqB,AAACC,AAAc,AAAA,AAAA,AAAAC,AAAaJ;AAC9C,AAAA,AAASU;AApB5B,AAqBe,AAAAE;AAAA,AAAA,AAAAC,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAC,AAAA,AAAAD,AAAA,AAAA,AAAA,AAAA,AAAAE,AAAAC,AAAAH,AAAAA;AAAA,AAAAI,AAAAJ,AAAA,AAAMK;AAAN,AAAAD,AAAAJ,AAAA,AAAeM;AAAf,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAEcA,AACAD;AAxB7B,AAyBc,AAAAE,AAAgBE;AAAhB,AAAA,AAAAD,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAP,AAAA,AAAAO,AAAA,AAAA,AAAA,AAAA,AAAAN,AAAAC,AAAAK,AAAAA;AAAA,AAAAJ,AAAAI,AAAA,AAAMH;AAAN,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAEcA,AACXI;AA5BjB,AA6Bc,AAAKA;AAAL,AAAA,AAAA,AAAA,AAAA,AAAA,AAC2BA;;AA9BzC3B,AA+BEF;AA/BF,AAAA,AAAAC,AAAAC,AAAAD,AAAAC,AAACC,AAAAA,AAAAA;;AAkCH;;;AAAA,AAAMa,AAEHH;AAFH,AAGE,AAAMiB,AAAO,AAACC,AAAoBlB;AAAlC,AACE,AAAI,AAACmB,AAAeF;AAApB,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAEW,AAACG,AAAO,AAACC,AAAkBJ,AAEnCjB;;AAJH,AAKGsB,AAAI,AAACpC,AAAU+B","names":["athens.parse-renderer/transform","tree","G__82151","G__82152","instaparse.core/transform","contents","cljs.core.concat.cljs$core$IFn$_invoke$arity$2","title","id","G__82153","re-frame.core/subscribe","athens.router/navigate-page","cljs.core/deref","uid","string","G__82154","G__82155","athens.parse-renderer/parse-and-render","tag-name","G__82156","p__82157","map__82158","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","url","alt","p__82160","map__82161","text","result","athens.parser/parse-to-ast","instaparse.core/failure?","cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic","instaparse.core/get-failure","cljs.core/vec"],"sourcesContent":["(ns athens.parse-renderer\n  (:require\n    [athens.parser :as parser]\n    [athens.router :refer [navigate-page]]\n    [instaparse.core :as insta]\n    [re-frame.core :refer [subscribe]]))\n\n\n(declare parse-and-render)\n\n\n;; Instaparse transforming docs: https://github.com/Engelberg/instaparse#transforming-the-tree\n\n(defn transform\n  \"Transforms Instaparse output to Hiccup.\"\n  [tree]\n  (insta/transform\n    {:block     (fn [& contents]\n                  (concat [:span {:class \"block\"}] contents))\n     :page-link (fn [title]\n                  (let [id (subscribe [:block/uid [:node/title title]])]\n                    [:span {:class \"page-link\"}\n                     [:span {:style {:color \"gray\"}} \"[[\"]\n                     [:span {:on-click #(navigate-page (:block/uid @id))\n                             :style {:text-decoration \"none\" :color \"dodgerblue\"}} title]\n                     [:span {:style {:color \"gray\"}} \"]]\"]]))\n     :block-ref (fn [uid]\n                  (let [string (subscribe [:block/string [:block/uid uid]])]\n                    [:span {:class \"block-ref\"\n                            :style {:font-size \"0.9em\" :border-bottom \"1px solid gray\"}}\n                     [:span {:on-click #(navigate-page uid)} (parse-and-render (:block/string @string))]]))\n     :hashtag   (fn [tag-name]\n                  (let [id (subscribe [:block/uid [:node/title tag-name]])]\n                    [:span {:class \"hashtag\"\n                            :style {:color \"gray\" :text-decoration \"none\" :font-weight \"bold\"}\n                            :on-click #(navigate-page (:block/uid @id))}\n                     (str \"#\" tag-name)]))\n     :url-image  (fn [{url :url alt :alt}]\n                   [:img {:class \"url-image\"\n                          :alt alt\n                          :src url}])\n     :url-link  (fn [{url :url} text]\n                  [:a {:class \"url-link\"\n                       :href  url}\n                   text])\n     :bold      (fn [text]\n                  [:strong {:class \"bold\"} text])}\n    tree))\n\n\n(defn parse-and-render\n  \"Converts a string of block syntax to Hiccup, with fallback formatting if it can\u2019t be parsed.\"\n  [string]\n  (let [result (parser/parse-to-ast string)]\n    (if (insta/failure? result)\n      [:span\n       {:title (pr-str (insta/get-failure result))\n        :style {:color \"red\"}}\n       string]\n      [vec (transform result)])))\n"]}