{"version":3,"sources":["athens/db.cljs"],"mappings":"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","names":["athens.db/str-kw-mappings","athens.db/convert-key","k","cljs.core.get.cljs$core$IFn$_invoke$arity$3","athens.db/parse-hms","hms","cljs.core/coll?","p1__67555#","cljs.core.map.cljs$core$IFn$_invoke$arity$2","cljs.core.reduce.cljs$core$IFn$_invoke$arity$3","p__67556","vec__67559","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","acc","v","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","athens.db/parse-tuples","tuples","cljs.core.partition.cljs$core$IFn$_invoke$arity$2","cljs.core/rest","p1__67562#","clojure.edn/read-string","p1__67563#","cljs.core/cons","athens.db/json-str-to-edn","json-str","js/JSON.parse","cljs.core.js__GT_clj.cljs$core$IFn$_invoke$arity$1","athens.db/str-to-db-tx","edn-data","cljs.core/first","athens.db/athens-url","athens.db/help-url","athens.db/ego-url","athens.db/schema","athens.db/sort-block","block","temp__5733__auto__","children","cljs.core/seq","cljs.core.sort_by.cljs$core$IFn$_invoke$arity$2","athens.db/shape-parent-query","pull-results","b","res","cljs.core.conj.cljs$core$IFn$_invoke$arity$2","cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2","cljs.core/reverse","cljs.core.into.cljs$core$IFn$_invoke$arity$2","athens.db/block-pull-pattern","athens.db/node-pull-pattern","athens.db/parents-pull-pattern","athens.db/q-refs","cljs.core/deref","athens.db/get-children","conn","entids","posh.reagent/pull-many","athens.db/get-parents","js/athens","js/athens.db","js/athens.db.rfdb","athens.db/rfdb","js/athens.db.dsdb","athens.db/dsdb","datascript.core.create_conn.cljs$core$IFn$_invoke$arity$1","re-posh.core/connect!"],"sourcesContent":["(ns athens.db\n  (:require\n    [clojure.edn :as edn]\n    [datascript.core :as d]\n    [posh.reagent :refer [#_posh! #_transact! #_pull pull-many #_q]]\n    #_[re-frame.core :as re-frame]\n    [re-posh.core :as re-posh]))\n\n;; Data Parsing ;;\n(def str-kw-mappings\n  \"Maps attributes from \\\"Export All as JSON\\\" to original datascript attributes.\"\n  {\"children\" :block/children\n   \"create-email\" :create/email\n   \"create-time\" :create/time\n   \"edit-email\" :edit/email\n   \"edit-time\" :edit/time\n   \"email\" :user/email\n   \"emoji\" :ent/emoji\n   \"emojis\" :ent/emojis\n   \"props\" :block/props\n   \"string\" :block/string\n   \"text-align\" :block/text-align\n   \"time\" nil\n   \"title\" :node/title\n   \"uid\" :block/uid\n   \"users\" nil\n   \"heading\" :block/heading})\n\n\n(defn convert-key\n  [k]\n  (get str-kw-mappings k k))\n\n\n(defn parse-hms\n  \"Parses JSON retrieved from Roam's \\\"Export all as JSON\\\". Not fully functional.\"\n  [hms]\n  (if (not (coll? hms))\n    hms\n    (map #(reduce (fn [acc [k v]]\n                    (assoc acc (convert-key k) (parse-hms v)))\n                  {}\n                  %)\n         hms)))\n\n\n(defn parse-tuples\n  \"Parse tuples exported via method specified in https://roamresearch.com/#/app/ego/page/eJ14YtH2G.\"\n  [tuples]\n  (->> tuples\n       (partition 3)            ; chunk into 3-tuples\n       rest                     ; drop first tuple which is (?e ?a ?v)\n       (map #(map edn/read-string %))\n       (map #(cons :db/add %))))\n\n\n(defn json-str-to-edn\n  \"Convert a JSON str to EDN. May receive JSON through an HTTP request or file upload.\"\n  [json-str]\n  (->> json-str\n       (js/JSON.parse)\n       (js->clj)))\n\n\n(defn str-to-db-tx\n  \"Deserializes a JSON string into EDN and then Datoms.\"\n  [json-str]\n  (let [edn-data (json-str-to-edn json-str)]\n    (if (coll? (first edn-data))\n      (parse-hms edn-data)\n      (parse-tuples edn-data))))\n\n\n(def athens-url \"https://raw.githubusercontent.com/athensresearch/athens/master/data/athens.datoms\")\n(def help-url   \"https://raw.githubusercontent.com/athensresearch/athens/master/data/help.datoms\")\n(def ego-url    \"https://raw.githubusercontent.com/athensresearch/athens/master/data/ego.datoms\")\n\n;; datascript and posh ;;\n(def schema\n  {:block/uid      {:db/unique :db.unique/identity}\n   :node/title     {:db/unique :db.unique/identity}\n   :attrs/lookup   {:db/cardinality :db.cardinality/many}\n   :block/children {:db/cardinality :db.cardinality/many\n                    :db/valueType :db.type/ref}})\n\n\n(defn sort-block\n  [block]\n  (if-let [children (seq (:block/children block))]\n    (assoc block :block/children\n           (sort-by :block/order (map sort-block children)))\n    block))\n\n\n(defn shape-parent-query\n  \"Find path from nested block to origin node.\n  Don't totally understand why query returns {:db/id nil} if no results. Returns nil when making q queries\"\n  [pull-results]\n  (when (:db/id pull-results)\n    (->> (loop [b   pull-results\n                res []]\n           (if (:node/title b)\n             (conj res b)\n             (recur (first (:block/_children b))\n                    (conj res (dissoc b :block/_children)))))\n         (rest)\n         (reverse)\n         (into []))))\n\n;; all blocks (except for block refs) want to get all children\n(def block-pull-pattern\n  '[:db/id :block/uid :block/string :block/open :block/order {:block/children ...}])\n\n;; the main difference between a page and a block is that page has a title attribute\n(def node-pull-pattern\n  (conj block-pull-pattern :node/title))\n\n;; reverse lookup, all the way up to node/title, is needed to get parent context\n(def parents-pull-pattern\n  '[:db/id :node/title :block/uid :block/string {:block/_children ...}])\n\n\n;; used for both linked and unlinked references, just different regex\n(def q-refs\n  '[:find [?e ...]\n    :in $ ?regex\n    :where\n    [?e :block/string ?s]\n    [(re-find ?regex ?s)]])\n\n\n(defn get-children\n  [conn entids]\n  @(pull-many conn block-pull-pattern entids))\n\n\n(defn get-parents\n  [conn entids]\n  (->> @(pull-many conn parents-pull-pattern entids)\n       (map shape-parent-query)\n       (into [])))\n\n\n;; re-frame ;;\n(defonce rfdb {:user \"Jeff\"\n               :current-route nil\n               :loading true\n               :errors {}\n               :athena false})\n\n\n(defonce dsdb (d/create-conn schema))\n(re-posh/connect! dsdb)\n"]}