{"version":3,"sources":["athens/db.cljs"],"mappings":";;;;;AASA;;;AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAKA;AAoBL,AAAA,AAAMC,AACHC;AADH,AAEE,AAACC,AAAIH,AAAgBE,AAAEA;;AAGzB;;;AAAA,AAAME,AAEHC;AAFH,AAGE,AAAI,AAAK,AAACC,AAAMD;AACdA;;AACA,AAAA,AAAAE,AAACC;AAAD,AAAM,AAACC,AAAO,AAAAC,AAAKG;AAAL,AAAA,AAAAF,AAAAD;AAAA,AAAAE,AAAAD,AAAA,AAAA,AAAUT;AAAV,AAAAU,AAAAD,AAAA,AAAA,AAAYG;AAAZ,AACE,AAACC,AAAMF,AAAI,AAACZ,AAAYC,AAAG,AAACE,AAAAA,AAAAA,AAAUU,AAAAA;AADhD,AAAAP;AAIDF;;;AAGT;;;AAAA,AAAMW,AAEHC;AAFH,AAOO,AAAA,AAAAK,AAACd;AAAD,AAAM,AAAA,AAAAc,AAACC;AADP,AAAA,AAAAH,AAACZ;AAAD,AAAM,AAAAY,AAACZ,AAAIa;AAHXJ,AACA,AAAA,AAACC,AACDC,AACA;;AAIP;;;AAAA,AAAMK,AAEHC;AAFH,AAGOA,AACA,AAACC,AACD,AAACC;;AAGR;;;AAAA,AAAMC,AAEHH;AAFH,AAGE,AAAMI,AAAS,AAACL,AAAgBC;AAAhC,AACE,AAAI,AAACnB,AAAM,AAACwB,AAAMD;AAChB,AAACzB,AAAUyB;;AACX,AAACb,AAAaa;;;AAMpB,AAAA,AAAKE;AACL,AAAA,AAAKC;AACL,AAAA,AAAKC;AAML,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAKC;AAQL,AAAA,AAAMC,AACHC;AADH,AAEE,AAAAC,AAAkB,AAACE,AAAI,AAAA,AAAiBH;AAAxC,AAAA,AAAAC;AAAA,AAAAA,AAASC;AAAT,AACE,AAAA,AAACvB,AAAMqB,AACA,AAAA,AAACI,AAAqB,AAAChC,AAAI2B,AAAWG;;AAC7CF;;;AAGJ;;;;AAAA,AAAMK,AAGHC;AAHH,AAIE,AAAK,AAAOC,AAAID,AAMX,AAACvB,AACD,AAAC4B,AACDC;AARA,AACOJ;;AADP,AAEE,AAAI,AAAA,AAAaD;AACf,AAACE,AAAKD,AAAID;;AACV,AAAO,AAACb,AAAM,AAAA,AAAkBa;AACzB,AAACE,AAAKD,AAAI,AAAA,AAACE,AAAOH;;;;;;;;;AAMpC,AAAA,AAAA,AAAKM;AAIL,AAAKC,AACH,AAAA,AAACL,AAAKI;AAGR,AAAA,AAAA,AAAKE;AAOL,AAAA,AAAAC,AAAAC,AAAAC;AAAA;AAAA,AAAA,AAASC,AAAK,AAACC,AAActB;;AAC7B,AAACuB,AAAAA,AAAAA,AAAMF,AAAAA;AAGP,AAAA,AAAMG,AACHC,AAAE7C;AADL,AAEE,AAAA,AAAA,AAAI,AAAA,AAAA8C,AAAA,AAACC,AAAUN,AAAWI,AAAE7C,AAAGgB;;AASjC,AAAA,AAAAsB,AAAAC,AAAAS;AAAA;AAAA,AAAA,AAASC,AAAQ,AAAA,AAACC;;AAClB,AAAA,AAAaC;AAGb,AAAA,AAAMC,AACHC,AAAGC;AADN,AAEE,AAAA,AAAOvD;AACAsD,AAAIA;;AADX,AAEE,AAAME,AAAE,AAACvC,AAAMqC;AAAf,AACE,AACE,AAAA,AAAME;AAAGxD;;AADX,AAEE,AAACuD,AAAAA,AAAAA,AAAKC,AAAAA;AAAG,AAACxB,AAAKhC,AAAIwD;;AAFrB,AAGS,AAAO,AAACxB,AAAKhC,AAAIwD;AAAG,AAACC,AAAKH;;;;;;;;;;AAGzC,AAAA,AAAMI,AACHJ,AAAGK;AADN,AAEE,AAACxB,AAAI,AAACyB,AAAK,AAAG,AAACC,AAAMP,AAAIK,AAAGL;;AAG9B,AAAA,AAAMQ,AACHR,AAAGC;AADN,AAEE,AAACQ,AAAK,AAAA,AAAAC,AAACC;AAAD,AAAa,AAACC,AAAI,AAAAF,AAAAA,AAACT,AAAAA,AAAAA;AAASD;;AAGpC,AAAA,AAAMa,AACHb,AAAGC;AADN,AAEE,AAACa,AAAM,AAAA,AAAAC,AAACC;AAAD,AAAa,AAACJ,AAAI,AAAAG,AAAAA,AAACd,AAAAA,AAAAA;AAASD;;AAGrC,AAAA,AAACiB,AAAU7B,AACA,AAAK8B;AAAL,AACE,AAAAC,AAAmCD;AAAnCC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAC,AAAA,AAAAD,AAAA,AAAA,AAAA,AAAA,AAAAE,AAAAC,AAAAH,AAAAA;AAAA,AAAAI,AAAAJ,AAAA,AAAcK;AAAd,AAAAD,AAAAJ,AAAA,AAAwBM;AAAxB,AACE,AAAM,AAAAC,AAAKF;AAAL,AAAA,AAAAE;AAAeD;;AAAfC;;;AAAN,AACE,AAACC,AAAM/B,AAAQ,AAAKgC;AAAL,AACMA,AACA,AAAA,AAAAC,AAAC9B,AACD,AAACrB,AACD,AAAC0B;AAFD,AAAY,AAAAyB,AAAcL;AACpBC,AACK3B,AAAA;;;AALlC;;;AAWf,AAAA,AAAAb,AAAAC,AAAA4C;AAAA;AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAASC","names":["athens.db/str-kw-mappings","athens.db/convert-key","k","cljs.core.get.cljs$core$IFn$_invoke$arity$3","athens.db/parse-hms","hms","cljs.core/coll?","p1__48457#","cljs.core.map.cljs$core$IFn$_invoke$arity$2","cljs.core.reduce.cljs$core$IFn$_invoke$arity$3","p__48458","vec__48459","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","acc","v","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","athens.db/parse-tuples","tuples","cljs.core.partition.cljs$core$IFn$_invoke$arity$2","cljs.core/rest","p1__48462#","clojure.edn/read-string","p1__48463#","cljs.core/cons","athens.db/json-str-to-edn","json-str","js/JSON.parse","cljs.core.js__GT_clj.cljs$core$IFn$_invoke$arity$1","athens.db/str-to-db-tx","edn-data","cljs.core/first","athens.db/athens-url","athens.db/help-url","athens.db/ego-url","athens.db/schema","athens.db/sort-block","block","temp__5733__auto__","children","cljs.core/seq","cljs.core.sort_by.cljs$core$IFn$_invoke$arity$2","athens.db/shape-parent-query","pull-results","b","res","cljs.core.conj.cljs$core$IFn$_invoke$arity$2","cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2","cljs.core/reverse","cljs.core/vec","athens.db/block-pull-pattern","athens.db/node-pull-pattern","athens.db/parents-pull-pattern","js/athens","js/athens.db","js/athens.db.dsdb","athens.db/dsdb","datascript.core.create_conn.cljs$core$IFn$_invoke$arity$1","posh.reagent/posh!","athens.db/e-by-av","a","cljs.core/deref","datascript.core.datoms.cljs$core$IFn$_invoke$arity$4","js/athens.db.history","athens.db/history","cljs.core.atom.cljs$core$IFn$_invoke$arity$1","athens.db/history-limit","athens.db/drop-tail","xs","pred","x","cljs.core/next","athens.db/trim-head","n","cljs.core.drop.cljs$core$IFn$_invoke$arity$2","cljs.core/count","athens.db/find-prev","cljs.core/last","p1__48464#","cljs.core.take_while.cljs$core$IFn$_invoke$arity$2","cljs.core/not","athens.db/find-next","cljs.core/fnext","p1__48465#","cljs.core.drop_while.cljs$core$IFn$_invoke$arity$2","datascript.core.listen_BANG_.cljs$core$IFn$_invoke$arity$3","tx-report","map__48467","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","db-before","db-after","and__4174__auto__","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2","h","p1__48466#","js/athens.db.rfdb","athens.db/rfdb"],"sourcesContent":["(ns athens.db\n  (:require\n    [clojure.edn :as edn]\n    [datascript.core :as d]\n    [posh.reagent :refer [posh!]]))\n\n;;; JSON Parsing\n\n\n(def str-kw-mappings\n  \"Maps attributes from \\\"Export All as JSON\\\" to original datascript attributes.\"\n  {\"children\" :block/children\n   \"create-email\" :create/email\n   \"create-time\" :create/time\n   \"edit-email\" :edit/email\n   \"edit-time\" :edit/time\n   \"email\" :user/email\n   \"emoji\" :ent/emoji\n   \"emojis\" :ent/emojis\n   \"props\" :block/props\n   \"string\" :block/string\n   \"text-align\" :block/text-align\n   \"time\" nil\n   \"title\" :node/title\n   \"uid\" :block/uid\n   \"users\" nil\n   \"heading\" :block/heading})\n\n\n(defn convert-key\n  [k]\n  (get str-kw-mappings k k))\n\n\n(defn parse-hms\n  \"Parses JSON retrieved from Roam's \\\"Export all as JSON\\\". Not fully functional.\"\n  [hms]\n  (if (not (coll? hms))\n    hms\n    (map #(reduce (fn [acc [k v]]\n                    (assoc acc (convert-key k) (parse-hms v)))\n                  {}\n                  %)\n         hms)))\n\n\n(defn parse-tuples\n  \"Parse tuples exported via method specified in https://roamresearch.com/#/app/ego/page/eJ14YtH2G.\"\n  [tuples]\n  (->> tuples\n       (partition 3)            ; chunk into 3-tuples\n       rest                     ; drop first tuple which is (?e ?a ?v)\n       (map #(map edn/read-string %))\n       (map #(cons :db/add %))))\n\n\n(defn json-str-to-edn\n  \"Convert a JSON str to EDN. May receive JSON through an HTTP request or file upload.\"\n  [json-str]\n  (->> json-str\n       (js/JSON.parse)\n       (js->clj)))\n\n\n(defn str-to-db-tx\n  \"Deserializes a JSON string into EDN and then Datoms.\"\n  [json-str]\n  (let [edn-data (json-str-to-edn json-str)]\n    (if (coll? (first edn-data))\n      (parse-hms edn-data)\n      (parse-tuples edn-data))))\n\n\n;;; Example Roam DBs\n\n\n(def athens-url \"https://raw.githubusercontent.com/athensresearch/athens/master/data/athens.datoms\")\n(def help-url   \"https://raw.githubusercontent.com/athensresearch/athens/master/data/help.datoms\")\n(def ego-url    \"https://raw.githubusercontent.com/athensresearch/athens/master/data/ego.datoms\")\n\n\n;;; Datascript and Posh\n\n\n(def schema\n  {:block/uid      {:db/unique :db.unique/identity}\n   :node/title     {:db/unique :db.unique/identity}\n   :attrs/lookup   {:db/cardinality :db.cardinality/many}\n   :block/children {:db/cardinality :db.cardinality/many\n                    :db/valueType :db.type/ref}})\n\n\n(defn sort-block\n  [block]\n  (if-let [children (seq (:block/children block))]\n    (assoc block :block/children\n           (sort-by :block/order (map sort-block children)))\n    block))\n\n\n(defn shape-parent-query\n  \"Find path from nested block to origin node.\n  Don't totally understand why query returns {:db/id nil} if no results. Returns nil when making q queries\"\n  [pull-results]\n  (->> (loop [b   pull-results\n              res []]\n         (if (:node/title b)\n           (conj res b)\n           (recur (first (:block/_children b))\n                  (conj res (dissoc b :block/_children)))))\n       (rest)\n       (reverse)\n       vec))\n\n;; all blocks (except for block refs) want to get all children\n(def block-pull-pattern\n  '[:db/id :block/uid :block/string :block/open :block/order {:block/children ...}])\n\n;; the main difference between a page and a block is that page has a title attribute\n(def node-pull-pattern\n  (conj block-pull-pattern :node/title))\n\n;; reverse lookup, all the way up to node/title, is needed to get parent context\n(def parents-pull-pattern\n  '[:db/id :node/title :block/uid :block/string {:block/_children ...}])\n\n\n;;; posh\n\n\n(defonce dsdb (d/create-conn schema))\n(posh! dsdb)\n\n\n(defn e-by-av\n  [a v]\n  (-> (d/datoms @dsdb :avet a v) first :e))\n\n\n;;(defn e-by-av [db a v]\n;;  (-> (d/datoms db :avet a v) first :e))\n\n\n;; history\n\n(defonce history (atom []))\n(def ^:const history-limit 10)\n\n\n(defn drop-tail\n  [xs pred]\n  (loop [acc []\n         xs  xs]\n    (let [x (first xs)]\n      (cond\n        (nil? x) acc\n        (pred x) (conj acc x)\n        :else  (recur (conj acc x) (next xs))))))\n\n\n(defn trim-head\n  [xs n]\n  (vec (drop (- (count xs) n) xs)))\n\n\n(defn find-prev\n  [xs pred]\n  (last (take-while #(not (pred %)) xs)))\n\n\n(defn find-next\n  [xs pred]\n  (fnext (drop-while #(not (pred %)) xs)))\n\n\n(d/listen! dsdb :history\n           (fn [tx-report]\n             (let [{:keys [db-before db-after]} tx-report]\n               (when (and db-before db-after)\n                 (swap! history (fn [h]\n                                  (-> h\n                                      (drop-tail #(identical? % db-before))\n                                      (conj db-after)\n                                      (trim-head history-limit))))))))\n\n\n;;; re-frame\n\n\n(defonce rfdb {:user                \"Jeff\"\n               :current-route       nil\n               :loading             true\n               :errors              {}\n               :athena/open         false\n               :athena/recent-items '()\n               :devtool             false\n               :left-sidebar        true\n               :right-sidebar/open  false\n               :right-sidebar/items {}\n               :editing-uid         nil\n               :drag-bullet         {:uid          nil\n                                     :x            nil\n                                     :y            nil\n                                     :closest/uid  nil\n                                     :closest/kind nil}\n               :tooltip-uid         nil\n               :daily-notes         []})\n"]}