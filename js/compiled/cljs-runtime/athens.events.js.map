{"version":3,"sources":["athens/events.cljs"],"mappings":"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","names":["re_frame.core.reg_event_db.cljs$core$IFn$_invoke$arity$2","day8.re-frame.tracing/is-trace-enabled?","+debux-dbg-opts+","debux.common.util/send-form!","opts__54414__auto__","result__54415__auto__","debux.common.util/send-trace!","e","e54505","_","athens.db/rfdb","db","cljs.core.update.cljs$core$IFn$_invoke$arity$3","cljs.core/not","p__54506","vec__54507","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","G__54513","fexpr__54512","e54511","p__54514","vec__54515","selected-page","fexpr__54518","cljs.core/set","cljs.core.update.cljs$core$IFn$_invoke$arity$4","cljs.core/conj","p__54519","vec__54520","item","cljs.core.update_in.cljs$core$IFn$_invoke$arity$3","p__54523","vec__54524","uid","cljs.core/dissoc","re_frame.core.reg_event_fx.cljs$core$IFn$_invoke$arity$2","p__54527","p__54528","map__54529","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","vec__54530","G__54543","cljs.core/deref","G__54544","G__54545","e54542","p__54549","p__54550","map__54551","vec__54552","block","G__54556","G__54557","G__54558","datascript.core/pull","athens.db/dsdb","new-item","cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic","new-items","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","inc-items","cljs.core/reduce-kv","m","k","v","cljs.core/inc","sorted-items","cljs.core.into.cljs$core$IFn$_invoke$arity$2","cljs.core/sorted-map-by","k1","k2","cljs.core/compare","cljs.core.get_in.cljs$core$IFn$_invoke$arity$2","e54562","alert","e54563","e54570","cljs.core/assoc-in","e54571","p__54572","vec__54573","e54576","p__54577","vec__54578","p__54581","vec__54582","map","p__54585","vec__54586","p__54589","p__54590","map__54591","vec__54592","map__54595","title","new-db","now","athens.util/now-ts","athens.db/e-by-av","p__54598","map__54599","rfdb","athens.db/athens-url","p__54601","vec__54602","json-str","datoms","athens.db/str-to-db-tx","datascript.core/db-with","datascript.core/empty-db","athens.db/schema","re_frame.core.reg_event_fx.cljs$core$IFn$_invoke$arity$3","G__54605","G__54606","re-frame.core/inject-cofx","p__54607","map__54608","local-storage","datascript.transit/read-transit-str","p__54610","vec__54611","p__54614","vec__54615","p__54618","vec__54619","p__54622","vec__54623","temp__5735__auto__","prev","p1__54626#","athens.db/find-prev","athens.db/history","next","p1__54627#","athens.db/find-next","athens.events/rules","p__54628","vec__54629","_uid","athens.events/split-block","val","sel-start","parent","athens.db/get-parent","athens.db/get-block","head","cljs.core.subs.cljs$core$IFn$_invoke$arity$3","tail","cljs.core.subs.cljs$core$IFn$_invoke$arity$2","new-uid","athens.util/gen-block-uid","new-block","reindex","G__54636","G__54637","G__54638","G__54639","G__54640","datascript.core/q","cljs.core.map.cljs$core$IFn$_invoke$arity$2","p__54632","vec__54633","id","order","cljs.core.concat.cljs$core$IFn$_invoke$arity$2","athens.events/bump-up","G__54645","G__54646","G__54647","G__54648","G__54649","p__54641","vec__54642","p__54650","vec__54651","cljs.core/empty?","p__54655","vec__54656","older-sib","p1__54654#","cljs.core.filter.cljs$core$IFn$_invoke$arity$2","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","cljs.core/first","cljs.core/count","reindex-blocks","G__54663","G__54664","G__54665","G__54666","G__54667","p__54659","vec__54660","p__54668","vec__54669","grandpa","reindex-grandpa","G__54676","G__54677","G__54678","G__54679","G__54680","p__54672","vec__54673","and__4174__auto__","athens.events/target-child","source","source-parent","target","new-parent-children","G__54685","G__54686","G__54687","G__54688","G__54689","p__54681","vec__54682","new-target-children","G__54694","G__54695","G__54696","G__54697","G__54698","p__54690","vec__54691","athens.events/between","s","t","x","athens.events/target-sibling-same-parent","t-order","s-order","inc-or-dec","cljs.core/dec","G__54703","G__54704","G__54705","G__54706","G__54707","G__54708","G__54709","p__54699","vec__54700","athens.events/target-sibling-diff-parent","target-parent","source-parent-children","G__54714","G__54715","G__54716","G__54717","G__54718","p__54710","vec__54711","target-parent-children","G__54723","G__54724","G__54725","G__54726","G__54727","p__54719","vec__54720","p__54728","vec__54729","e54732","p__54733","vec__54734","source-uid","target-uid","kind","cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2"],"sourcesContent":["(ns athens.events\n  (:require\n    [athens.db :as db]\n    [athens.util :refer [now-ts gen-block-uid]]\n    [datascript.core :as d]\n    [datascript.transit :as dt]\n    [day8.re-frame.async-flow-fx]\n    [day8.re-frame.tracing :refer-macros [fn-traced]]\n    [re-frame.core :refer [reg-event-db reg-event-fx inject-cofx]]))\n\n\n;; -- re-frame app-db events ---------------------------------------------\n\n(reg-event-db\n  :init-rfdb\n  (fn-traced [_ _]\n             db/rfdb))\n\n\n(reg-event-db\n  :athena/toggle\n  (fn [db _]\n    (update db :athena/open not)))\n\n\n(reg-event-db\n  :athena/update-recent-items\n  (fn-traced [db [_ selected-page]]\n             (when (nil? ((set (:athena/recent-items db)) selected-page))\n               (update db :athena/recent-items conj selected-page))))\n\n\n(reg-event-db\n  :devtool/toggle\n  (fn [db _]\n    (update db :devtool/open not)))\n\n\n(reg-event-db\n  :left-sidebar/toggle\n  (fn [db _]\n    (update db :left-sidebar/open not)))\n\n\n(reg-event-db\n  :right-sidebar/toggle\n  (fn [db _]\n    (update db :right-sidebar/open not)))\n\n\n(reg-event-db\n  :right-sidebar/toggle-item\n  (fn [db [_ item]]\n    (update-in db [:right-sidebar/items item :open] not)))\n\n\n;; TODO: dec all indices > closed item\n(reg-event-db\n  :right-sidebar/close-item\n  (fn [db [_ uid]]\n    (update db :right-sidebar/items dissoc uid)))\n\n\n;; TODO: change right sidebar items from map to datascript\n(reg-event-fx\n  :right-sidebar/open-item\n  (fn-traced [{:keys [db]} [_ uid]]\n             (let [block     (d/pull @db/dsdb '[:node/title :block/string] [:block/uid uid])\n                   new-item  (merge block {:open true :index -1})\n                   new-items (assoc (:right-sidebar/items db) uid new-item)\n                   inc-items (reduce-kv (fn [m k v] (assoc m k (update v :index inc)))\n                                        {}\n                                        new-items)\n                   sorted-items (into (sorted-map-by (fn [k1 k2]\n                                                       (compare\n                                                         [(get-in new-items [k1 :index]) k2]\n                                                         [(get-in new-items [k2 :index]) k1]))) inc-items)]\n               {:db (assoc db :right-sidebar/items sorted-items)\n                :dispatch (when (false? (:right-sidebar/open db))\n                            [:right-sidebar/toggle])})))\n\n\n;; Alerts\n\n(reg-event-db\n  :alert/set\n  (fn-traced [db alert]\n             (assoc db :alert alert)))\n\n\n(reg-event-db\n  :alert/unset\n  (fn-traced [db]\n             (assoc db :alert nil)))\n\n\n;; Loading\n\n(reg-event-db\n  :loading/set\n  (fn-traced [db]\n             (assoc-in db [:loading?] true)))\n\n\n(reg-event-db\n  :loading/unset\n  (fn-traced [db]\n             (assoc-in db [:loading?] false)))\n\n\n;; Block Events\n\n(reg-event-db\n  :editing/uid\n  (fn-traced [db [_ uid]]\n             (assoc db :editing/uid uid)))\n\n\n(reg-event-db\n  :drag-bullet\n  (fn [db [_ map]]\n    (assoc db :drag-bullet map)))\n\n\n(reg-event-db\n  :tooltip/uid\n  (fn [db [_ uid]]\n    (assoc db :tooltip/uid uid)))\n\n\n;; Daily Notes\n\n(reg-event-db\n  :daily-notes/reset\n  (fn [db _]\n    (assoc db :daily-notes/items [])))\n\n\n;; TODO: don't use app-db, use dsdb\n(reg-event-fx\n  :daily-note/next\n  (fn [{:keys [db]} [_ {:keys [uid title]}]]\n    (let [new-db (update db :daily-notes/items conj uid)\n          now (now-ts)]\n      (if (db/e-by-av :block/uid uid)\n        {:db new-db}\n        {:db        new-db\n         :transact! [{:db/id -1 :node/title title :block/uid uid :create/time now :edit/time now}]}))))\n\n\n;; -- event-fx and Datascript Transactions -------------------------------\n\n;; Import/Export\n\n(reg-event-fx\n  :get-db/init\n  (fn [{rfdb :db} _]\n    {:db (-> db/rfdb\n             (assoc :loading? true))\n     :async-flow {:first-dispatch (if false\n                                    [:local-storage/get-db]\n                                    [:http/get-db])\n                  :rules          [{:when :seen?\n                                    :events :reset-conn\n                                    :dispatch-n [[:loading/unset]\n                                                 [:navigate (-> rfdb :current-route :data :name)]]\n                                    :halt? true}]}}))\n\n\n(reg-event-fx\n  :http/get-db\n  (fn [_ _]\n    {:http {:method :get\n            :url (str db/athens-url \"XXX\")\n            :opts {:with-credentials? false}\n            :on-success [:http-success/get-db]\n            :on-failure [:alert/set]}}))\n\n\n(reg-event-fx\n  :http-success/get-db\n  (fn [_ [_ json-str]]\n    (let [datoms (db/str-to-db-tx json-str)\n          new-db (d/db-with (d/empty-db db/schema) datoms)]\n      {:dispatch-n [[:reset-conn new-db]\n                    [:local-storage/set-db new-db]]})))\n\n\n(reg-event-fx\n  :local-storage/get-db\n  [(inject-cofx :local-storage \"datascript/DB\")]\n  (fn [{:keys [local-storage]} _]\n    {:dispatch [:reset-conn (dt/read-transit-str local-storage)]}))\n\n\n(reg-event-fx\n  :local-storage/set-db\n  (fn [_ [_ db]]\n    {:local-storage/set-db! db}))\n\n\n;; Datascript\n\n(reg-event-fx\n  :transact\n  (fn [_ [_ datoms]]\n    {:transact! datoms}))\n\n\n(reg-event-fx\n  :reset-conn\n  (fn [_ [_ db]]\n    {:reset-conn! db}))\n\n\n(reg-event-fx\n  :page/create\n  (fn [_ [_ title uid]]\n    (let [now (now-ts)]\n      {:transact! [{:db/id -1 :node/title title :block/uid uid :create/time now :edit/time now}]})))\n\n\n(reg-event-fx\n  :undo\n  (fn [_ _]\n    (when-let [prev (db/find-prev @db/history #(identical? @db/dsdb %))]\n      {:reset-conn! prev})))\n\n\n(reg-event-fx\n  :redo\n  (fn [_ _]\n    (when-let [next (db/find-next @db/history #(identical? @db/dsdb %))]\n      {:reset-conn! next})))\n\n\n;; TODO: move to db\n(def rules\n  '[[(after ?p ?at ?ch ?o)\n     [?p :block/children ?ch]\n     [?ch :block/order ?o]\n     [(> ?o ?at)]]\n    [(inc-after ?p ?at ?ch ?new-o)\n     (after ?p ?at ?ch ?o)\n     [(inc ?o) ?new-o]]\n    [(dec-after ?p ?at ?ch ?new-o)\n     (after ?p ?at ?ch ?o)\n     [(dec ?o) ?new-o]]])\n\n\n(reg-event-fx\n  :backspace\n  (fn [_ [_ _uid]]))\n\n\n;; TODO but how to set focus... especially async\n(defn split-block\n  [uid val sel-start]\n  (let [parent (db/get-parent [:block/uid uid])\n        block (db/get-block [:block/uid uid])\n        head (subs val 0 sel-start)\n        tail (subs val sel-start)\n        new-uid (gen-block-uid)\n        new-block {:db/id        -1\n                   :block/order  (inc (:block/order block))\n                   :block/uid    new-uid\n                   :block/open   true\n                   :block/string tail}\n        reindex (->> (d/q '[:find ?ch ?new-o\n                            :in $ % ?p ?at\n                            :where (inc-after ?p ?at ?ch ?new-o)]\n                          @db/dsdb rules (:db/id parent) (:block/order block))\n                     (map (fn [[id order]] {:db/id id :block/order order}))\n                     (concat [new-block]))]\n    {:transact! [[:db/add (:db/id block) :block/string head]\n                 {:db/id (:db/id parent)\n                  :block/children reindex}]\n     :dispatch  [:editing/uid new-uid]}))\n\n\n(defn bump-up\n  [uid val sel-start]\n  (let [parent (db/get-parent [:block/uid uid])\n        block (db/get-block [:block/uid uid])\n        tail (subs val sel-start)\n        new-uid (gen-block-uid)\n        new-block {:db/id        -1\n                   :block/order  (:block/order block)\n                   :block/uid    new-uid\n                   :block/open   true\n                   :block/string tail}\n        reindex (->> (d/q '[:find ?ch ?new-o\n                            :in $ % ?p ?at\n                            :where (inc-after ?p ?at ?ch ?new-o)]\n                          @db/dsdb rules (:db/id parent) (inc (:block/order block)))\n                     (map (fn [[id order]] {:db/id id :block/order order}))\n                     (concat [new-block]))]\n    {:transact! [[:db/add (:db/id block) :block/string \"\"]\n                 {:db/id (:db/id parent) :block/children reindex}]\n     :dispatch  [:editing/uid new-uid]}))\n\n\n;; TODO: if enter at end of block, if block open, insert new 0th child. otherwise, add sibling (default behavior right now)\n(reg-event-fx\n  :enter\n  (fn [_ [_ uid val sel-start]]\n    (cond\n      (not (zero? sel-start)) (split-block uid val sel-start)\n      (empty? val) {:dispatch [:unindent uid]}\n      (and (zero? sel-start) val) (bump-up uid val sel-start))))\n\n\n;; TODO: no-op when indenting as the right-most child\n(reg-event-fx\n  :indent\n  (fn [_ [_ uid]]\n    (let [block (db/get-block [:block/uid uid])\n          parent (db/get-parent [:block/uid uid])\n          older-sib (->> parent\n                         :block/children\n                         (filter #(= (dec (:block/order block)) (:block/order %)))\n                         first\n                         :db/id\n                         db/get-block)\n          new-block {:db/id (:db/id block) :block/order (count (:block/children older-sib))}\n          reindex-blocks (->> (d/q '[:find ?ch ?new-o\n                                     :in $ % ?p ?at\n                                     :where (dec-after ?p ?at ?ch ?new-o)]\n                                   @db/dsdb rules (:db/id parent) (:block/order block))\n                              (map (fn [[id order]] {:db/id id :block/order order})))]\n      {:transact! [[:db/retract (:db/id parent) :block/children (:db/id block)]\n                   {:db/id (:db/id older-sib) :block/children [new-block]} ;; becomes child of older sibling block \u2014 same parent but order-1\n                   {:db/id (:db/id parent) :block/children reindex-blocks}]}))) ;; reindex parent\n\n\n;; TODO: no-op when user tries to unindent to a child out of current context\n(reg-event-fx\n  :unindent\n  (fn [_ [_ uid]]\n    (let [parent (db/get-parent [:block/uid uid])\n          grandpa (db/get-parent (:db/id parent))\n          new-block {:block/uid uid :block/order (inc (:block/order parent))}\n          reindex-grandpa (->> (d/q '[:find ?ch ?new-order\n                                      :in $ % ?grandpa ?parent-order\n                                      :where (inc-after ?grandpa ?parent-order ?ch ?new-order)]\n                                    @db/dsdb rules (:db/id grandpa) (:block/order parent))\n                               (map (fn [[id order]] {:db/id id :block/order order}))\n                               (concat [new-block]))]\n      (when (and parent grandpa)\n        {:transact! [[:db/retract (:db/id parent) :block/children [:block/uid uid]]\n                     {:db/id (:db/id grandpa) :block/children reindex-grandpa}]}))))\n\n\n(defn target-child\n  [source source-parent target]\n  (let [new-block {:block/uid (:block/uid source) :block/order 0}\n        new-parent-children (->> (d/q '[:find ?ch ?new-order\n                                        :in $ % ?parent ?source-order\n                                        :where (dec-after ?parent ?source-order ?ch ?new-order)]\n                                      @db/dsdb rules (:db/id source-parent) (:block/order source))\n                                 (map (fn [[id order]] {:db/id id :block/order order})))\n        new-target-children (->> (d/q '[:find ?ch ?new-order\n                                        :in $ % ?parent ?at\n                                        :where (inc-after ?parent ?at ?ch ?new-order)]\n                                      @db/dsdb rules (:dbid target) 0)\n                                 (map (fn [[id order]] {:db/id id :block/order order}))\n                                 (concat [new-block]))]\n    [[:db/retract (:db/id source-parent) :block/children [:block/uid (:block/uid source)]] ;; retract source from parent\n     {:db/add (:db/id source-parent) :block/children new-parent-children} ;; reindex parent without source\n     {:db/id (:db/id target) :block/children new-target-children}])) ;; reindex target. include source\n\n\n(defn between\n  \"http://blog.jenkster.com/2013/11/clojure-less-than-greater-than-tip.html\"\n  [s t x]\n  (if (< s t)\n    (and (< s x) (< x t))\n    (and (< t x) (< x s))))\n\n\n(defn target-sibling-same-parent\n  [source target parent]\n  (let [t-order (:block/order target)\n        s-order (:block/order source)\n        new-block {:db/id (:db/id source) :block/order (inc t-order)}\n        inc-or-dec (if (> s-order t-order) inc dec)\n        reindex (->> (d/q '[:find ?ch ?new-order\n                            :in $ ?parent ?s-order ?t-order ?between ?inc-or-dec\n                            :where\n                            [?parent :block/children ?ch]\n                            [?ch :block/order ?order]\n                            [(?between ?s-order ?t-order ?order)]\n                            [(?inc-or-dec ?order) ?new-order]]\n                          @db/dsdb (:db/id parent) s-order t-order between inc-or-dec)\n                     (map (fn [[id order]] {:db/id id :block/order order}))\n                     (concat [new-block]))]\n    [{:db/add (:db/id parent) :block/children reindex}]))\n\n\n(defn target-sibling-diff-parent\n  [source target source-parent target-parent]\n  (let [new-block {:db/id (:db/id source) :block/order (inc (:block/order target))}\n        source-parent-children (->> (d/q '[:find ?ch ?new-order\n                                           :in $ % ?parent ?source-order\n                                           :where (dec-after ?parent ?source-order ?ch ?new-order)]\n                                         @db/dsdb rules (:db/id source-parent) (:block/order source))\n                                    (map (fn [[id order]] {:db/id id :block/order order})))\n        target-parent-children (->> (d/q '[:find ?ch ?new-order\n                                           :in $ % ?parent ?target-order\n                                           :where (inc-after ?parent ?target-order ?ch ?new-order)]\n                                         @db/dsdb rules (:db/id target-parent) (:block/order target))\n                                    (map (fn [[id order]] {:db/id id :block/order order}))\n                                    (concat [new-block]))]\n    [[:db/retract (:db/id source-parent) :block/children (:db/id source)]\n     {:db/id (:db/id source-parent) :block/children source-parent-children} ;; reindex source\n     {:db/id (:db/id target-parent) :block/children target-parent-children}])) ;; reindex target\n\n\n(reg-event-fx\n  :drop-bullet\n  (fn-traced [_ [_ source-uid target-uid kind]]\n             (let [source        (db/get-block [:block/uid source-uid])\n                   target        (db/get-block [:block/uid target-uid])\n                   source-parent (db/get-parent [:block/uid source-uid])\n                   target-parent (db/get-parent [:block/uid target-uid])]\n               {:transact!\n                (cond\n                  ;; child always has same behavior: move to first child of target\n                  (= kind :child) (target-child source source-parent target)\n                  ;; do nothing if target is directly above source\n                  (and (= source-parent target-parent)\n                       (= 1 (- (:block/order source) (:block/order target)))) nil\n                  ;; re-order blocks between source and target\n                  (= source-parent target-parent) (target-sibling-same-parent source target source-parent)\n                  ;;; when parent is different, re-index both source-parent and target-parent\n                  (not= source-parent target-parent) (target-sibling-diff-parent source target source-parent target-parent))})))\n\n;;;; TODO: delete the following logic when re-implementing title merge\n\n;;(defn node-with-title\n;;  [ds title]\n;;  (d/q '[:find ?e .\n;;         :in $ ?title\n;;         :where [?e :node/title ?title]]\n;;       ds title))\n;;\n;;\n;;(defn referencing-blocks\n;;  [ds title]\n;;  (d/q '[:find ?e ?s\n;;         :in $ ?regex\n;;         :where\n;;         [?e :block/string ?s]\n;;         [(re-find ?regex ?s)]]\n;;       ds (patterns/linked title)))\n;;\n;;\n;;(defn rename-refs-tx\n;;  [old-title new-title [eid s]]\n;;  (let [new-s (str/replace\n;;                s\n;;                (patterns/linked old-title)\n;;                (str \"$1$3$4\" new-title \"$2$5\"))]\n;;    [:db/add eid :block/string new-s]))\n;;\n;;\n;;(defn rename-tx\n;;  [ds old-title new-title]\n;;  (let [eid (node-with-title ds old-title)\n;;        blocks (referencing-blocks ds old-title)]\n;;    (->> blocks\n;;         (map (partial rename-refs-tx old-title new-title))\n;;         (into [[:db/add eid :node/title new-title]]))))\n;;\n;;\n;;(reg-event-fx\n;;  :node/renamed\n;;  [(rp/inject-cofx :ds)]\n;;  (fn-traced [{:keys [db ds]} [_ old-title new-title]]\n;;             (when (not= old-title new-title)\n;;               (if (node-with-title ds new-title)\n;;                 {:db (assoc db :merge-prompt {:active true\n;;                                               :old-title old-title\n;;                                               :new-title new-title})\n;;                  :timeout {:action :start\n;;                            :id :merge-prompt\n;;                            :wait 7000\n;;                            :event [:node/merge-canceled]}}\n;;                 {:transact (rename-tx ds old-title new-title)}))))\n;;\n;;\n;;(defn count-children\n;;  [ds title]\n;;  (d/q '[:find (count ?children) .\n;;         :in $ ?title\n;;         :where [?e :node/title ?title]\n;;         [?e :block/children ?children]]\n;;       ds title))\n;;\n;;\n;;(defn get-children-eids\n;;  [ds title]\n;;  (d/q '[:find [?children ...]\n;;         :in $ ?title\n;;         :where [?e :node/title ?title]\n;;         [?e :block/children ?children]]\n;;       ds title))\n;;\n;;\n;;(defn move-blocks-tx\n;;  [ds from-title to-title]\n;;  (let [block-count (count-children ds to-title)\n;;        block-eids (get-children-eids ds from-title)]\n;;    (mapcat (fn [eid]\n;;              (let [order (:block/order (d/pull ds [:block/order] eid))]\n;;                [[:db/add [:node/title to-title] :block/children eid]\n;;                 [:db/add eid :block/order (+ order block-count)]]))\n;;            block-eids)))\n;;\n;;\n;;(reg-event-fx\n;;  :node/merged\n;;  [(rp/inject-cofx :ds)]\n;;  (fn-traced [{:keys [db ds]} [_ primary-title secondary-title]]\n;;             {:db (dissoc db :merge-prompt)\n;;              :timeout {:action :clear\n;;                        :id :merge-prompt}\n;;              :transact (concat [[:db.fn/retractEntity [:node/title secondary-title]]]\n;;                                (move-blocks-tx ds secondary-title primary-title)\n;;                                (rename-tx ds primary-title secondary-title))}))\n;;\n;;\n;;(reg-event-fx\n;;  :node/merge-canceled\n;;  (fn-traced [{:keys [db]} _]\n;;             {:db (dissoc db :merge-prompt)\n;;              :timeout {:action :clear\n;;                        :id :merge-prompt}}))\n\n"]}