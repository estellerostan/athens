{"version":3,"sources":["athens/devcards/blocks.cljs"],"mappings":"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","names":["athens.devcards.blocks/block-style","athens.devcards.blocks/block-disclosure-toggle-style","athens.style.color.cljs$core$IFn$_invoke$arity$1","athens.devcards.blocks/block-indicator-style","G__57993","garden.selectors/&","garden.selectors/after","athens.style/OPACITIES","G__57994","garden.selectors/before","G__57995","stylefy.core.keyframes.cljs$core$IFn$_invoke$arity$variadic","athens.devcards.blocks/drop-area-indicator","athens.devcards.blocks/block-content-style","athens.devcards.blocks/tooltip-style","athens.style/DEPTH-SHADOWS","athens.style.color.cljs$core$IFn$_invoke$arity$2","athens.devcards.blocks/block-component","ident","block","athens.db/get-block-document","athens.devcards.blocks/block-el","p__57996","map__57997","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","uid","string","open","order","children","dbid","cljs.core/deref","map__57999","open?","and__4174__auto__","cljs.core/seq","closed?","cljs.core/not","editing-uid","G__58000","re-frame.core/subscribe","tooltip-uid","G__58001","x","y","dragging-uid","closest-uid","closest-kind","G__58002","stylefy.core.use_style.cljs$core$IFn$_invoke$arity$2","cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","athens.devcards.blocks/dragging-style","clojure.string.join.cljs$core$IFn$_invoke$arity$2","G__58004","G__58005","athens.devcards.blocks/toggle","js/module$node_modules$$material_ui$icons$index.KeyboardArrowDown","stylefy.core.use_style.cljs$core$IFn$_invoke$arity$1","athens.router.navigate_uid.cljs$core$IFn$_invoke$arity$1","komponentit.autosize/textarea","e","G__58006","G__58007","athens.devcards.blocks/db-on-change","athens.devcards.blocks/on-key-down","athens.parse-renderer/parse-and-render","iter__4582__auto__","s__58009","cljs.core/LazySeq","temp__5735__auto__","cljs.core/chunked-seq?","c__4580__auto__","size__4581__auto__","cljs.core/count","b__58011","cljs.core/chunk-buffer","i__58010","cljs.core._nth.cljs$core$IFn$_invoke$arity$2","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__58008","cljs.core/chunk-rest","cljs.core/first","cljs.core/cons","cljs.core/rest","child","athens.devcards.blocks/on-change","val","G__58012","re-frame.core/dispatch","goog.functions/debounce","id","G__58013","key","shift","sel-start","goog.events.KeyCodes/TAB","G__58014","G__58015","goog.events.KeyCodes/ENTER","G__58016","goog.events.KeyCodes/BACKSPACE","G__58017","devcards.core/register-card","devcards.core/card-base","js/athens","js/athens.devcards","js/athens.devcards.blocks","js/athens.devcards.blocks.t_athens$devcards$blocks58018","athens.devcards.blocks/t_athens$devcards$blocks58018","_58020","meta58019","this__41690__auto__","devcard-opts__41691__auto__","cljs.core.assoc.cljs$core$IFn$_invoke$arity$variadic","v__41709__auto__","cljs.core/fn?","data-atom__41710__auto__","owner__41711__auto__","reagent.core/as-element","devcards.core/assert-options-map","this__4428__auto__","writer__4429__auto__","opt__4430__auto__","cljs.core/-write","athens.devcards.blocks/->t_athens$devcards$blocks58018","cljs.core/chunk-first"],"sourcesContent":["(ns athens.devcards.blocks\n  (:require\n    [\"@material-ui/icons\" :as mui-icons]\n    [athens.db :as db]\n    [athens.parse-renderer :refer [parse-and-render]]\n    [athens.router :refer [navigate-uid]]\n    [athens.style :refer [color DEPTH-SHADOWS OPACITIES]]\n    [cljsjs.react]\n    [cljsjs.react.dom]\n    [clojure.string :refer [join]]\n    [devcards.core :refer-macros [defcard-rg]]\n    [garden.selectors :as selectors]\n    [goog.functions :refer [debounce]]\n    [komponentit.autosize :as autosize]\n    [re-frame.core  :refer [dispatch subscribe]]\n    [stylefy.core :as stylefy :refer [use-style]])\n  (:import\n    (goog.events\n      KeyCodes)))\n\n\n;;; Styles\n\n\n(def block-style\n  {:display \"flex\"\n   :line-height \"2em\"\n   :position \"relative\"\n   :justify-content \"flex-start\"\n   :flex-direction \"column\"})\n\n\n(def block-disclosure-toggle-style\n  {:width \"1em\"\n   :height \"2em\"\n   :flex-shrink \"0\"\n   :display \"flex\"\n   :background \"none\"\n   :border \"none\"\n   :border-radius \"100px\"\n   :transition \"all 0.05s ease\"\n   :align-items \"center\"\n   :justify-content \"center\"\n   :padding \"0\"\n   :-webkit-appearance \"none\"\n   ::stylefy/mode [[:hover {:color (color :link-color)}]\n                   [\":is(button)\" {:cursor \"pointer\"}]]\n   ::stylefy/manual [[:&.closed [:svg {:transform \"rotate(-90deg)\"}]]]})\n\n\n(def block-indicator-style\n  {:flex-shrink \"0\"\n   :cursor \"pointer\"\n   :width \"0.75em\"\n   :margin-right \"0.25em\"\n   :transition \"all 0.05s ease\"\n   :height \"2em\"\n   :color (color :panel-color)\n   ::stylefy/mode [[:after {:content \"''\"\n                            :background \"currentColor\"\n                            :transition \"all 0.05s ease\"\n                            :border-radius \"100px\"\n                            :box-shadow \"0 0 0 2px transparent\"\n                            :display \"inline-flex\"\n                            :margin \"50% 0 0 50%\"\n                            :transform \"translate(-50%, -50%)\"\n                            :height \"0.3125em\"\n                            :width \"0.3125em\"}]\n                   [:hover {:color (color :link-color)}]]\n\n   ::stylefy/manual [[:&.open {}]\n                     [:&.closed {}]\n                     [:&.closed [(selectors/& (selectors/after)) {:box-shadow (str \"0 0 0 2px \" (color :body-text-color))\n                                                                  :opacity (:opacity-med OPACITIES)}]]\n                     [:&.closed [(selectors/& (selectors/before)) {:content \"none\"}]]\n                     [:&.closed [(selectors/& (selectors/before)) {:content \"none\"}]]\n                     [:&:hover:after {:transform \"translate(-50%, -50%) scale(1.3)\"}]\n                     [:&.dragging {:z-index \"1000\"\n                                   :cursor \"grabbing\"\n                                   :color (color :body-text-color)}]\n                     [:&.selected {}]]})\n\n\n(stylefy/keyframes \"drop-area-appear\"\n                   [:from\n                    {:opacity \"0\"}]\n                   [:to\n                    {:opacity \"1\"}])\n\n\n(stylefy/keyframes \"drop-area-color-pulse\"\n                   [:from\n                    {:opacity (:opacity-lower OPACITIES)}]\n                   [:to\n                    {:opacity (:opacity-med OPACITIES)}])\n\n\n(def drop-area-indicator\n  {:display \"block\"\n   :height \"1px\"\n   :margin-bottom \"-1px\"\n   :color (color :body-text-color)\n   :position \"relative\"\n   :transform-origin \"left\"\n   :z-index \"1000\"\n   :width \"100%\"\n   :animation \"drop-area-appear .5s ease\"\n   ::stylefy/manual [[:&:after {:position \"absolute\"\n                                :content \"''\"\n                                :top \"-0.5px\"\n                                :right \"0\"\n                                :bottom \"-0.5px\"\n                                :left \"0\"\n                                :border-radius \"100px\"\n                                :animation \"drop-area-color-pulse 1s ease infinite alternate\"\n                                :background \"currentColor\"}]]})\n\n\n(def block-content-style\n  {:position \"relative\"\n   :overflow \"visible\"\n   :z-index \"1\"\n   :flex-grow \"1\"\n   :word-break \"break-word\"\n   ::stylefy/manual [[:textarea {:display \"none\"}]\n                     [:&:hover [:textarea {:display \"block\"\n                                           :z-index 1}]]\n                     [:textarea {:-webkit-appearance \"none\"\n                                 :cursor \"text\"\n                                 :resize \"none\"\n                                 :transform \"translate3d(0,0,0)\"\n                                 :color \"inherit\"\n                                 :padding \"0\"\n                                 :background (color :panel-color)\n                                 :position \"absolute\"\n                                 :top \"0\"\n                                 :left \"0\"\n                                 :right \"0\"\n                                 :width \"100%\"\n                                 :min-height \"100%\"\n                                 :caret-color (color :link-color)\n                                 :margin \"0\"\n                                 :font-size \"inherit\"\n                                 :line-height \"inherit\"\n                                 :border-radius \"4px\"\n                                 :transition \"opacity 0.15s ease\"\n                                 :box-shadow (str \"-4px 0 0 0\" (color :panel-color))\n                                 :border \"0\"\n                                 :opacity \"0\"\n                                 :font-family \"inherit\"}]\n                     [:textarea:focus\n                      :.is-editing {:outline \"none\"\n                                    :z-index \"10\"\n                                    :display \"block\"\n                                    :opacity \"1\"}]\n                     [:span [:span\n                             :a {:position \"relative\"\n                                 :z-index \"2\"}]]]})\n\n\n(stylefy/keyframes \"tooltip-appear\"\n                   [:from\n                    {:opacity \"0\"\n                     :transform \"scale(0)\"}]\n                   [:to\n                    {:opacity \"1\"\n                     :transform \"scale(1)\"}])\n\n\n(def tooltip-style\n  {:z-index    2\n   :position \"absolute\"\n   :box-shadow [[(:64 DEPTH-SHADOWS) \", 0 0 0 1px \" (color :body-text-color :opacity-lower)]]\n   :flex-direction \"column\"\n   :background-color \"white\"\n   :padding \"8px 12px\"\n   :border-radius \"4px\"\n   :line-height \"24px\"\n   :left \"8px\"\n   :top \"32px\"\n   :transform-origin \"8px 24px\"\n   :min-width \"150px\"\n   :animation \"tooltip-appear .2s ease\"\n   :transition \"background .1s ease\"\n   :display \"table\"\n   :color (color :body-text-color :opacity-high)\n   :border-spacing \"4px\"\n   ::stylefy/manual [[:div {:display \"table-row\"}]\n                     [:b {:display \"table-cell\"\n                          :user-select \"none\"\n                          :text-align \"right\"\n                          :text-transform \"uppercase\"\n                          :font-size \"12px\"\n                          :letter-spacing \"0.1em\"\n                          :opacity (:opacity-med OPACITIES)}]\n                     [:span {:display \"table-cell\"\n                             :user-select \"all\"}\n                      [:&:hover {:color (color :header-text-color)}]]\n                     [:&:after {:content \"''\"\n                                :position \"absolute\"\n                                :top \"-12px\"\n                                :bottom \"-16px\"\n                                :border-radius \"inherit\"\n                                :left \"-16px\"\n                                :right \"-16px\"\n                                :z-index -1\n                                :display \"block\"}]]})\n\n\n(def dragging-style)\n  ;;{:background-color \"lightblue\"})\n\n\n\n;;; Components\n\n\n(declare block-component block-el toggle on-key-down db-on-change)\n\n\n(defn block-component\n  [ident]\n  (let [block (db/get-block-document ident)]\n    [block-el block]))\n\n\n;; TODO: more clarity on open? and closed? predicates, why we use `cond` in one case and `if` in another case\n(defn block-el\n  \"Two checks to make sure block is open or not: children exist and :block/open bool\"\n  [{:block/keys [uid string open order children] dbid :db/id}]\n  (let [open?       (and (seq children) open)\n        closed?     (and (seq children) (not open))\n        editing-uid @(subscribe [:editing/uid])\n        tooltip-uid @(subscribe [:tooltip/uid])\n        {:keys        [x y]\n         dragging-uid :uid\n         closest-uid  :closest/uid\n         closest-kind :closest/kind} @(subscribe [:drag-bullet])]\n\n    [:div (use-style (merge block-style\n                            (when (= dragging-uid uid) dragging-style))\n                     {:class    (join \" \" [\"block-container\" (when (= dragging-uid uid) \"dragging\")])\n                      :data-uid uid})\n     [:div {:style {:display \"flex\"}}\n\n      ;; Toggle\n      (if (seq children)\n        [:button (use-style block-disclosure-toggle-style\n                            {:class (cond open? \"open\" closed? \"closed\")\n                             :on-click #(toggle [:block/uid uid] open)})\n         [:> mui-icons/KeyboardArrowDown {:style {:font-size \"16px\"}}]]\n        [:span (use-style block-disclosure-toggle-style)])\n\n      ;; Bullet\n      (if (= dragging-uid uid)\n        [:span (merge (use-style block-indicator-style\n                                 {:class    (join \" \" [\"bullet\" \"dragging\" (if closed? \"closed\" \"open\")])\n                                  :data-uid uid})\n                      {:style {:transform (str \"translate(\" x \"px, \" y \"px)\")}})]\n\n        [:span (use-style block-indicator-style\n                          {:class    (str \"bullet \" (if closed? \"closed\" \"open\"))\n                           :data-uid uid\n                           :on-click #(navigate-uid uid)})])\n\n      ;; Tooltip\n      (when (and (= tooltip-uid uid)\n                 (not dragging-uid))\n        [:div (use-style tooltip-style {:class \"tooltip\"})\n         [:div [:b \"db/id\"] [:span dbid]]\n         [:div [:b \"uid\"] [:span uid]]\n         [:div [:b \"order\"] [:span order]]])\n\n      ;; Actual Contents\n      [:div (use-style (merge block-content-style {:user-select (when dragging-uid \"none\")})\n                       {:class    \"block-contents\"\n                        :data-uid uid})\n       [autosize/textarea {:default-value       string\n                           :class       (when (= editing-uid uid) \"is-editing\")\n                           :auto-focus  true\n                           :on-change   (fn [e] (db-on-change (.. e -target -value) uid))\n                           :on-key-down (fn [e] (on-key-down e uid))}]\n       [parse-and-render string]\n\n       ;; Drop Indicator\n       (when (and (= closest-uid uid)\n                  (= closest-kind :child))\n         [:span (use-style drop-area-indicator)])]]\n\n     ;; Children\n     (when open?\n       (for [child children]\n         [:div {:style {:margin-left \"32px\"} :key (:db/id child)}\n          [block-el child]]))\n\n     ;; Drop Indicator\n     (when (and (= closest-uid uid) (= closest-kind :sibling))\n       [:span (use-style drop-area-indicator)])]))\n\n;; Helpers\n\n(defn on-change\n  [val uid]\n  (dispatch [:transact [[:db/add [:block/uid uid] :block/string val]]]))\n\n\n(def db-on-change (debounce on-change 500))\n\n\n(defn toggle\n  [id open]\n  (dispatch [:transact [[:db/add id :block/open (not open)]]]))\n\n\n(defn on-key-down\n  [e uid]\n  (let [key       (.. e -keyCode)\n        shift     (.. e -shiftKey)\n        val       (.. e -target -value)\n        sel-start (.. e -target -selectionStart)]\n    (cond\n      (and (= key KeyCodes.TAB) shift) (dispatch [:unindent uid])\n      (= key KeyCodes.TAB) (dispatch [:indent uid])\n      (= key KeyCodes.ENTER) (dispatch [:enter uid val sel-start])\n      (and (= key KeyCodes.BACKSPACE) (zero? sel-start)) (dispatch [:backspace uid]))))\n\n\n;;; Devcards\n\n\n(defcard-rg Block\n  \"Pull entity 2347, a block within Athens FAQ, and its children. Doesn't pull parents, unlike `block-page`\"\n  [block-component 2347])\n"]}